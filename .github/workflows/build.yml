name: Build

on:
  release:
    types: [ created ]
  workflow_dispatch:
    inputs:
      nightly:
        type: boolean
        default: true
        description: "Whether to build nightly version"
      version:
        type: string
        default: v0.0.0
        description: "Version to build (e.g. v0.0.0)"

env:
  QT_VERSION: '6.8.*'
  TARGET_NAME: 'EZ4Connect'
  DISPLAY_NAME: 'EZ4Connect'

jobs:
  build-windows-x64:
    runs-on: windows-latest
    env:
      ARCHIVE_NAME: ${{ github.event.repository.name }}-${{ github.event.release.tag_name }}-windows-x64
    steps:
      - uses: actions/checkout@v4

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ env.QT_VERSION }}
          host: 'windows'
          target: 'desktop'
          arch: 'win64_msvc2022_64'
          modules: 'qt5compat qtpositioning qtwebchannel qtwebengine'
          cache: 'true'
          cache-key-prefix: 'install-qt-action-win64_msvc2022_64'

      - name: Configure
        env:
          NIGHTLY_BUILD: ${{ inputs.nightly || github.event_name != 'release' }}
          RELEASE_VERSION: ${{ inputs.version || github.event.release.tag_name }}
        run: |
          mkdir build
          if ( [bool]::Parse("${{ env.NIGHTLY_BUILD }}") ) {
            cmake -DNIGHTLY_BUILD=ON -DGIT_HASH="$(git rev-parse --short=7 HEAD)" -DCMAKE_BUILD_TYPE=Release -S . -B build
          } else {
            $VER = "${{ env.RELEASE_VERSION }}".substring(1)
            cmake -DNIGHTLY_BUILD=OFF -DREL_VER="$VER" -DCMAKE_BUILD_TYPE=Release -S . -B build
          }

      - name: Build
        run: |
          cmake --build build --target ${{ env.TARGET_NAME }} --config Release --parallel $(nproc)

      - name: Download and copy files
        env:
          VCINSTALLDIR: 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC'
        run: |
          mkdir "${{ env.DISPLAY_NAME }}"
          cd "${{ env.DISPLAY_NAME }}"
          cp ../build/Release/${{ env.TARGET_NAME }}.exe .
          windeployqt.exe ${{ env.TARGET_NAME }}.exe
          curl -LO https://github.com/chenx-dust/zju-connect/releases/latest/download/zju-connect-windows-amd64.zip
          tar -xf zju-connect-windows-amd64.zip
          rm zju-connect-windows-amd64.zip
          cp ../libs/wintun/bin/amd64/wintun.dll .
          rm vc_redist.x64.exe
          cd ..
          Compress-Archive -Path "${{ env.DISPLAY_NAME }}" -DestinationPath ${{ env.ARCHIVE_NAME }}.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARCHIVE_NAME }}
          path: ${{ env.ARCHIVE_NAME }}.zip

  release:
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    needs:
      - build-windows-x64

    env:
      ARCHIVE_PREFIX: ${{ github.event.repository.name }}-${{ github.event.release.tag_name }}
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: ${{ env.ARCHIVE_PREFIX }}-*
          merge-multiple: true

      - name: Upload to release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          gh release upload ${{ github.event.release.tag_name }} ${{ env.ARCHIVE_PREFIX }}-*
